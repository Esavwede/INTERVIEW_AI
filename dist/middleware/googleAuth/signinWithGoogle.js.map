{"version":3,"file":"signinWithGoogle.js","sourceRoot":"/","sources":["middleware/googleAuth/signinWithGoogle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,+CAAiC;AACjC,MAAM,CAAC,MAAM,EAAE,CAAC;AAChB,2CAAwC;AACxC,uEAA+C;AAC/C,wEAAqE;AACrE,yDAA2D;AAE3D,wDAAgC;AAChC,mEAAoF;AAyB5E,MAAM,QAAQ,GAAG,IAAI,0BAAc,EAAE,CAAA;AAErC,MAAM,eAAe,GAAK;IACI,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,qBAA+B;IACrD,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,yBAAmC;IAC7D,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,wBAAkC;CAC9D,CAAA;AAI3B,SAAe,YAAY,CAAE,WAAmB,EAAE,YAAoB,EAAE,OAAsB,EAAC,IAAoB;;;QACjH,IAAI,CAAC;YAEK,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAA0B,CAAA;YACxD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAE,KAAK,CAAE,CAAA;YAEhD,IAAI,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,GAAG,CAAA,EACd,CAAC;gBAEC,gBAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAA;gBAGjD,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC;gBACzC,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;gBACzC,MAAM,KAAK,GAAG,MAAA,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,0CAAE,KAAK,CAAA;gBACtC,MAAM,UAAU,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAA;gBAEtE,MAAM,OAAO,GAAG,MAAM,WAAI,CAAC,MAAM,CAAE,UAAU,CAAE,CAAA;gBAE/C,OAAO,IAAI,CAAC,IAAI,EAAE,OAAO,CAAE,CAAA;YAC7B,CAAC;YAEC,gBAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAA;YACtD,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,CAAE,CAAA;QAElC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YACZ,gBAAM,CAAC,KAAK,CAAC,CAAC,EAAC,iDAAiD,CAAC,CAAA;YACjE,MAAM,IAAI,yBAAW,CAAC,iDAAiD,CAAC,CAAA;QAC9E,CAAC;IACL,CAAC;CAAA;AAGT,kBAAQ,CAAC,GAAG,CAAC,IAAI,iCAAc,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC,CAAC;AAEhE,kBAAe,kBAAQ,CAAC","sourcesContent":["\r\nimport * as dotenv from 'dotenv';\r\ndotenv.config();\r\nimport { User } from '@src/models/User';\r\nimport logger from '@src/system/logger/logger';\r\nimport { ServerError } from '@src/util/Errors/Endpoints/serverError';\r\nimport { UserRepository } from '@src/repos/user/user.repo';\r\n\r\nimport passport from 'passport';\r\nimport { Strategy as GoogleStrategy, VerifyCallback } from 'passport-google-oauth2';\r\n\r\n\r\n          // Define the types for the profile object from Google\r\n              interface GoogleProfile\r\n                        {\r\n                          \r\n                          id: string;\r\n                          displayName: string;\r\n                          name: \r\n                              {\r\n                                    familyName: string;\r\n                                    givenName: string;\r\n                              };\r\n                          emails: \r\n                                  Array<{\r\n                                          value: string;\r\n                                          verified: boolean;\r\n                                      }>;\r\n                          photos: \r\n                                  Array<{\r\n                                          value: string;\r\n                                        }>;\r\n                        }\r\n\r\n        const userRepo = new UserRepository() \r\n\r\n        const authCredentials =   {\r\n                                      clientID: process.env.GOOGLE_AUTH_CLIENT_ID as string,\r\n                                      clientSecret: process.env.GOOGLE_AUTH_CLIENT_SECRET as string,\r\n                                      callbackURL: process.env.GOOGLE_AUTH_CALLBACK_URL as string,\r\n                                  }                       \r\n\r\n\r\n\r\n        async function authCallBack( accessToken: string, refreshToken: string, profile: GoogleProfile,done: VerifyCallback) {\r\n          try {\r\n\r\n                    var email = profile.emails[0].value as unknown as string  // User Email \r\n                    const user = await userRepo.findByEmail( email ) // Find User In Db \r\n\r\n                    if( !user?._id )\r\n                    {\r\n\r\n                      logger.info(\"SIGNIN_WITH_GOOGLE: New User Login\") \r\n                   \r\n                      // Save New User to Database \r\n                      const firstName = profile.name.givenName;\r\n                      const lastName = profile.name.familyName;\r\n                      const email = profile.emails[0]?.value\r\n                      const newUserDoc = { firstname: firstName, lastname: lastName, email }\r\n\r\n                      const newUser = await User.create( newUserDoc )\r\n\r\n                      return done(null, newUser ) \r\n                    }\r\n\r\n                      logger.info(\"SIGNIN_WITH_GOOGLE: Existing User Login\")\r\n                      return done(null, user )\r\n                  \r\n            } catch (e: any) {\r\n                  logger.error(e,`SIGNIN WITH GOOGLE ERROR: Could Not Signin User`) \r\n                  throw new ServerError(\"Error Occured while signing in User with google\")\r\n            }\r\n        }\r\n\r\n\r\npassport.use(new GoogleStrategy(authCredentials, authCallBack));\r\n\r\nexport default passport;\r\n"]}