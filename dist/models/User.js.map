{"version":3,"file":"User.js","sourceRoot":"/","sources":["models/User.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAqD;AACrD,oDAA2B;AAC3B,uDAAyF;AACzF,uEAA8C;AAkB5C,MAAM,UAAU,GAAG,IAAI,iBAAM,CAC3B;IACI,SAAS,EACT;QACI,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC;KACf;IACD,QAAQ,EACR;QACI,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC;KACf;IACD,KAAK,EACL;QACE,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,CAAC;QACZ,MAAM,EAAE,IAAI;KACb;IACD,QAAQ,EACR;QACE,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,KAAK;QACf,SAAS,EAAE,CAAC;KACb;IACD,UAAU,EACV;QACE,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,KAAK;KACf;IACD,OAAO,EACP;QACE,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,IAAI;KACd;IACD,eAAe,EACf;QACE,IAAI,EAAE,CAAE,8CAA4B,CAAE;KACvC;CACJ,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACF,CAAA;AAED,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,UAAe,IAAI;;QAEtC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;YAAE,OAAO,IAAI,EAAE,CAAA;QAC/C,MAAM,IAAI,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QACrC,IAAI,CAAC,QAAQ,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAE,CAAA;QACxD,IAAI,EAAE,CAAA;IACV,CAAC;CAAA,CAAC,CAAA;AAGJ,UAAU,CAAC,OAAO,CAAC,eAAe,GAAG,UAAgB,iBAAyB;;QAC1E,IACA,CAAC;YACG,OAAO,MAAM,gBAAM,CAAC,OAAO,CAAE,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAE,CAAA;QACnE,CAAC;QACD,OAAM,CAAM,EACZ,CAAC;YACG,gBAAM,CAAC,KAAK,CAAC,CAAC,EAAC,cAAc,CAAC,CAAA;YAC9B,OAAO,KAAK,CAAA;QAChB,CAAC;IACL,CAAC;CAAA,CAAA;AAGc,QAAA,IAAI,GAAG,kBAAQ,CAAC,KAAK,CAAQ,MAAM,EAAE,UAAU,CAAE,CAAA","sourcesContent":["import mongoose, { Schema, Document } from \"mongoose\" \r\nimport bcrypt from \"bcrypt\" \r\nimport { ILearningModuleOverview, LearningModuleOverviewSchema } from \"./learningProfile\"\r\nimport logger from \"@src/system/logger/logger\"\r\n\r\n\r\nexport interface IUser extends Document \r\n{\r\n  firstname: string, \r\n  lastname: string,\r\n  email: string, \r\n  password: string,\r\n  isVerified: boolean, \r\n  newUser: boolean, \r\n  createdAt: Date, \r\n  updatedAt: Date, \r\n  learningProfile: ILearningModuleOverview[], \r\n  comparePassword( candidatePassword: string): Promise<boolean> \r\n}\r\n// \r\n\r\n  const userSchema = new Schema<IUser>(\r\n    {\r\n        firstname: \r\n        {\r\n            type: String,\r\n            required: true,\r\n            minlength: 2\r\n        },\r\n        lastname: \r\n        {\r\n            type: String, \r\n            required: true, \r\n            minlength: 2\r\n        }, \r\n        email: \r\n        {\r\n          type: String,\r\n          required: true, \r\n          minlength: 2, \r\n          unique: true \r\n        },\r\n        password:\r\n        {\r\n          type: String, \r\n          required: false, \r\n          minlength: 6 \r\n        },\r\n        isVerified:   \r\n        {\r\n          type: Boolean,\r\n          required: true, \r\n          default: false \r\n        },\r\n        newUser: \r\n        {\r\n          type: Boolean, \r\n          required: true, \r\n          default: true \r\n        },\r\n        learningProfile:\r\n        {\r\n          type: [ LearningModuleOverviewSchema ]\r\n        }\r\n    },\r\n    {\r\n      timestamps: true \r\n    }\r\n  )\r\n\r\n  userSchema.pre(\"save\", async function(next){\r\n\r\n      if( !this.isModified('password') )return next()\r\n      const salt = await bcrypt.genSalt(10) \r\n      this.password = await bcrypt.hash( this.password, salt )\r\n      next() \r\n  })\r\n\r\n  \r\nuserSchema.methods.comparePassword = async function( candidatePassword: string ): Promise<boolean> {\r\n    try \r\n    {\r\n        return await bcrypt.compare( candidatePassword, this.password )\r\n    }\r\n    catch(e: any)\r\n    {\r\n        logger.error(e,'Bcrypt Error') \r\n        return false\r\n    }\r\n}\r\n\r\n\r\n  export const User = mongoose.model<IUser>(\"User\", userSchema ) "]}