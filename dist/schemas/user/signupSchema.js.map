{"version":3,"file":"signupSchema.js","sourceRoot":"/","sources":["schemas/user/signupSchema.ts"],"names":[],"mappings":";;;AACA,6BAA8B;AAEjB,QAAA,YAAY,GAAG,OAAC,CAAC,MAAM,CAChC;IACI,IAAI,EAAE,OAAC,CAAC,MAAM,CACb;QACG,SAAS,EAAE,OAAC,CAAC,MAAM,CAEf;YACI,cAAc,EAAE,qCAAqC;YACrD,kBAAkB,EAAE,kCAAkC;SACzD,CACJ;aACA,GAAG,CAAC,CAAC,EAAC,0BAA0B,CAAC;aACjC,GAAG,CAAC,EAAE,EAAC,yCAAyC,CAAC;QAGlD,QAAQ,EAAE,OAAC,CAAC,MAAM,CAEd;YACI,cAAc,EAAE,oCAAoC;YACpD,kBAAkB,EAAE,iCAAiC;SACxD,CACJ;aACA,GAAG,CAAC,CAAC,EAAC,yBAAyB,CAAC;aAChC,GAAG,CAAC,EAAE,EAAC,wCAAwC,CAAC;QAEjD,KAAK,EAAE,OAAC,CAAC,MAAM,CAEX;YACI,cAAc,EAAE,iCAAiC;YACjD,kBAAkB,EAAE,8BAA8B;SACrD,CACJ;aACA,KAAK,CAAC,gBAAgB,CAAC;QAExB,QAAQ,EAAE,OAAC,CAAC,MAAM,CAEd;YACI,cAAc,EAAE,oCAAoC;YACpD,kBAAkB,EAAE,iCAAiC;SACxD,CACJ;aACA,GAAG,CAAC,CAAC,EAAE,6CAA6C,CAAC;aACrD,GAAG,CAAC,EAAE,EAAE,0CAA0C,CAAC;QAEpD,eAAe,EAAE,OAAC,CAAC,MAAM,CAErB;YACI,cAAc,EAAE,2CAA2C;YAC3D,kBAAkB,EAAE,wCAAwC;SAC/D,CACJ;KACJ,CAAC;SACD,MAAM,CAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,eAAe,EAAE,EAAE,OAAO,EAAC,wBAAwB,EAAE,IAAI,EAAE,CAAC,kBAAkB,CAAC,EAAC,CAAE;CAE7H,CACJ,CAAA;AAGY,QAAA,0BAA0B,GAAG,OAAC,CAAC,MAAM,CAE1B;IACI,KAAK,EAAE,OAAC,CAAC,MAAM,CAEP;QACI,KAAK,EAAE,OAAC,CAAC,MAAM,CAEX;YACI,cAAc,EAAE,wCAAwC;YACxD,kBAAkB,EAAE,8BAA8B;SACrD,CACJ;aACA,GAAG,CAAC,CAAC,EAAC,8BAA8B,CAAC;KACzC,CACJ;CACR,CACJ,CAAA","sourcesContent":["\r\nimport { z, TypeOf} from \"zod\" \r\n\r\nexport const SignupSchema = z.object(\r\n    {\r\n        body: z.object\r\n        ({ \r\n            firstname: z.string\r\n            (\r\n                {\r\n                    required_error: \"firstname not Found In Request Body\",\r\n                    invalid_type_error: \"firstname must be of type String\",\r\n                }\r\n            )\r\n            .min(2,'firstname length below 2')\r\n            .max(50,'firstname length cannot be more than 50'),\r\n\r\n\r\n            lastname: z.string\r\n            (\r\n                {\r\n                    required_error: \"lastname not Found In Request Body\",\r\n                    invalid_type_error: \"lastname must be of type String\",\r\n                }\r\n            )\r\n            .min(2,'lastname length below 2')\r\n            .max(50,'lastname length cannot be more than 50'),\r\n\r\n            email: z.string\r\n            (\r\n                {\r\n                    required_error: \"email not Found In Request Body\",\r\n                    invalid_type_error: \"email must be of type String\",\r\n                }\r\n            )\r\n            .email(' Invalid Email'),\r\n\r\n            password: z.string\r\n            (\r\n                {\r\n                    required_error: \"password not Found In Request Body\",\r\n                    invalid_type_error: \"password must be of type String\",\r\n                }\r\n            )\r\n            .min(5, \"Password must be at least 5 characters long\")\r\n            .max(64, \"Password must be less than 64 characters\"),\r\n            \r\n            confirmPassword: z.string\r\n            (\r\n                {\r\n                    required_error: \"confirmPassword not Found In Request Body\",\r\n                    invalid_type_error: \"confirmPassword must be of type String\",\r\n                }\r\n            )\r\n        })\r\n        .refine( data => data.password === data.confirmPassword, { message:\"passwords do not match\", path: [\"confirm password\"]} )\r\n       \r\n    }\r\n)\r\n\r\n\r\nexport const VerifyUserValidationSchema = z.object \r\n                    (\r\n                        {\r\n                            query: z.object \r\n                                (\r\n                                    {\r\n                                        token: z.string\r\n                                        (\r\n                                            {\r\n                                                required_error: \"token not Found In Request QueryParams\",\r\n                                                invalid_type_error: \"token must be of type String\",\r\n                                            }\r\n                                        )\r\n                                        .min(6,'VERIFICATION TOKEN NOT VALID') \r\n                                    }\r\n                                )\r\n                        }\r\n                    )\r\n                    \r\n\r\n export type SignupInput =  TypeOf<typeof SignupSchema>\r\n export type VerifyUserSchema = z.infer<typeof VerifyUserValidationSchema> "]}