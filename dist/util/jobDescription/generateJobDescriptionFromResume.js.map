{"version":3,"file":"generateJobDescriptionFromResume.js","sources":["util/jobDescription/generateJobDescriptionFromResume.ts"],"sourceRoot":"/","sourcesContent":["\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport logger from \"@src/system/logger/logger\";\r\n\r\nexport async function generateJobDescriptionWithAI( jobRole: string, experienceLevel: string, resume: string )\r\n{\r\n\r\n\r\n  const JOB_ROLE_GENERATION_PROMPT = `\r\n  Your_Instructions: You are an AI system that specializes in creating complete job descriptions exactly as they would appear on real-world job listing platforms like LinkedIn, Indeed, etc.\r\n\r\n  - You must generate the entire job description yourself without leaving any placeholders or gaps for the user to fill in.\r\n  - You must provide only the job description you created, without adding any extra text or AI assistant commentary.\r\n\r\n  You will use three inputs:\r\n\r\n  1. The user's job role: Based on this, you will determine the job title and responsibilities for the job description.\r\n  2. The user's experience level: You will tailor the job description to match the specified seniority, ensuring it fits the appropriate level (e.g., junior, mid-level, senior).\r\n  3. The user's resume: Extract relevant skills from the resume and ensure the job description you create includes these skills. For example, if the user is a backend developer with Python experience, do not include irrelevant technologies like C#. Ensure the technologies and skills match what the user has.\r\n\r\n  In addition to the job description, you will generate the following fictional company-specific details:\r\n  - A fictional company name\r\n  - A fictional company email address\r\n  - A fictional company location\r\n  - Job-specific details including responsibilities, qualifications, benefits, and any other typical sections of a real-world job description.\r\n\r\n  Important: Do not include any placeholder text like [yourcompanyname]. Instead, generate all details yourself.\r\n\r\n  Role: ${jobRole}\r\n  Experience Level: ${experienceLevel}\r\n  Resume: ${resume}\r\n`;\r\n\r\n\r\n    const GEMINI_API_KEY = process.env.GEMINI_API_KEY || '' \r\n    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\r\n\r\n    async function run() \r\n    {\r\n                const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\"});\r\n                const result = await model.generateContent( JOB_ROLE_GENERATION_PROMPT  );\r\n                console.log(result.response.text());\r\n                return result.response.text() \r\n    }\r\n\r\n    const result = run() \r\n     return result \r\n\r\n}\r\n\r\nexport async function extractCompanyNameFromJobDescription( jobDescription: string )\r\n{\r\n  try \r\n  {\r\n      const prompt = `Your Task: Examine the job description below and return only the company name\r\n      \r\n      - Note! You should only return the company name and nothing else \r\n\r\n      Now Extract the company name from the job description below\r\n\r\n      JobDescription: \r\n      ${jobDescription}\r\n      `\r\n\r\n\r\n      const GEMINI_API_KEY = process.env.GEMINI_API_KEY || '' \r\n      const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\r\n  \r\n      async function run() \r\n      {\r\n                  const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\"});\r\n                  const result = await model.generateContent( prompt  );\r\n                  console.log(result.response.text());\r\n                  return result.response.text() \r\n      }\r\n  \r\n      const result = run() \r\n       return result \r\n\r\n  }\r\n  catch(e: any)\r\n  {\r\n    logger.error(e,\"could not extract company name from job description\")\r\n    return 'Logby' // fictional company name \r\n  }\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAIA,oEA4CC;AAED,oFAmCC;AApFD,yDAA2D;AAC3D,uEAA+C;AAE/C,SAAsB,4BAA4B,CAAE,OAAe,EAAE,eAAuB,EAAE,MAAc;;QAI1G,MAAM,0BAA0B,GAAG;;;;;;;;;;;;;;;;;;;;UAoB3B,OAAO;sBACK,eAAe;YACzB,MAAM;CACjB,CAAC;QAGE,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,CAAA;QACvD,MAAM,KAAK,GAAG,IAAI,kCAAkB,CAAC,cAAc,CAAC,CAAC;QAErD,SAAe,GAAG;;gBAEN,MAAM,KAAK,GAAG,KAAK,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,kBAAkB,EAAC,CAAC,CAAC;gBACrE,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,eAAe,CAAE,0BAA0B,CAAG,CAAC;gBAC1E,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;gBACpC,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;YACzC,CAAC;SAAA;QAED,MAAM,MAAM,GAAG,GAAG,EAAE,CAAA;QACnB,OAAO,MAAM,CAAA;IAElB,CAAC;CAAA;AAED,SAAsB,oCAAoC,CAAE,cAAsB;;QAEhF,IACA,CAAC;YACG,MAAM,MAAM,GAAG;;;;;;;QAOb,cAAc;OACf,CAAA;YAGD,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,CAAA;YACvD,MAAM,KAAK,GAAG,IAAI,kCAAkB,CAAC,cAAc,CAAC,CAAC;YAErD,SAAe,GAAG;;oBAEN,MAAM,KAAK,GAAG,KAAK,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,kBAAkB,EAAC,CAAC,CAAC;oBACrE,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,eAAe,CAAE,MAAM,CAAG,CAAC;oBACtD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;oBACpC,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;gBACzC,CAAC;aAAA;YAED,MAAM,MAAM,GAAG,GAAG,EAAE,CAAA;YACnB,OAAO,MAAM,CAAA;QAElB,CAAC;QACD,OAAM,CAAM,EACZ,CAAC;YACC,gBAAM,CAAC,KAAK,CAAC,CAAC,EAAC,qDAAqD,CAAC,CAAA;YACrE,OAAO,OAAO,CAAA;QAChB,CAAC;IACH,CAAC;CAAA","debug_id":"01a9ff24-465a-5da6-94cf-7ac0a4dec815"}