{"version":3,"file":"learningModule.route.js","sources":["routes/LearningModule/learningModule.route.ts"],"sourceRoot":"/","sourcesContent":["\r\n\r\nimport { Router, Express } from \"express\"\r\nimport logger from \"@src/system/logger/logger\"\r\nimport { LearningModuleController } from \"@src/controller/learningModule/learningModule.controller\"\r\nimport { validateRequestSchema } from \"@src/middleware/validate/request/validateRequestSchema\"\r\nimport { CreateLearningModuleSchema, DeleteLearningModuleSchema, GetLearningModuleSchema, PublishLearningModuleValidationSchema, UpdateLearningModuleSchema } from \"@src/schemas/learningModule/learningModule.schema\"\r\nimport { LearningModulePartController } from \"@src/controller/learningModulePart/learningModulePart.controller\"\r\nimport { GetLearningModulePartValidationSchema } from \"@src/schemas/learningModule/learningModule.schema\"\r\nimport { validateRequestToken } from \"@src/util/Auth/tokens\"\r\n\r\n\r\nconst router = Router() \r\n\r\nexport function learningModuleRoutes(app: Express )\r\n{\r\n    try \r\n    {\r\n\r\n        const learningModuleController = new LearningModuleController() \r\n        const learningModulePartController = new LearningModulePartController() \r\n\r\n\r\n\r\n        /*@openapi */\r\n/**\r\n * @openapi\r\n * /learning-module:\r\n *   post:\r\n *     tags:\r\n *       - Learning Module\r\n *     summary: Create a new learning module\r\n *     description: This endpoint allows users to create a new learning module by providing the necessary details.\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               title:\r\n *                 type: string\r\n *                 description: \"Title of the learning module\"\r\n *                 example: \"Interview preparations\"\r\n *               area:\r\n *                 type: string\r\n *                 description: \"Id of Area\"\r\n *                 example: \"7478723y22rh33ih\"\r\n *               stage:\r\n *                 type: string\r\n *                 description: \"Stage Id\"\r\n *                 example: \"jfaoj3232r32r\"\r\n *               description:\r\n *                 type: string\r\n *                 description: \"Detailed description of the module\"\r\n *                 example: \"How to Prepare for Interviews\"\r\n *               imgSrc:\r\n *                 type: string\r\n *                 format: url\r\n *                 description: \"Image URL for the module\"\r\n *                 example: \"https://example.com/image.png\"\r\n *     responses:\r\n *       '201':\r\n *         description: Learning module created successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success: boolean\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Learning module created successfully\"\r\n *       '400':\r\n *         description: Bad request. Validation error.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"Validation failed. Please input valid data.\"\r\n *       '401':\r\n *         description: Unauthorized. Access token is missing or invalid.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"Unauthorized access.\"\r\n *       '403':\r\n *         description: Forbidden. User doesn't have permission.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"You do not have permission to perform this action.\"\r\n *       '500':\r\n *         description: Internal server error.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"An error occurred on the server.\"\r\n */\r\n\r\n        // Create Learning Module \r\n        router.post('/', validateRequestSchema( CreateLearningModuleSchema), learningModuleController.create.bind( learningModuleController ))\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*@openapi */\r\n/**\r\n * @openapi\r\n * /learning-module/{id}:\r\n *   get:\r\n *     tags:\r\n *       - Learning Module\r\n *     summary: Get a specific learning module by ID\r\n *     description: This endpoint retrieves a learning module by its ID.\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: \"The ID of the learning module\"\r\n *         example: \"60d5ec49f779c82f95dbfc9f\"\r\n *     responses:\r\n *       '200':\r\n *         description: Learning module retrieved successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 id:\r\n *                   type: string\r\n *                   example: \"60d5ec49f779c82f95dbfc9f\"\r\n *                 title:\r\n *                   type: string\r\n *                   example: \"Introduction to Backend Development\"\r\n *                 area:\r\n *                   type: string\r\n *                   example: \"Backend Development\"\r\n *                 stage:\r\n *                   type: string\r\n *                   example: \"Beginner\"\r\n *                 description:\r\n *                   type: string\r\n *                   example: \"This module introduces the basic concepts of backend development.\"\r\n *                 imgSrc:\r\n *                   type: string\r\n *                   format: url\r\n *                   example: \"https://example.com/image.png\"\r\n *       '400':\r\n *         description: Bad request. Validation error.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"Please Input Learning Module Id\"\r\n *       '404':\r\n *         description: Learning module not found.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"Learning module not found.\"\r\n *       '500':\r\n *         description: Internal server error.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 error:\r\n *                   type: string\r\n *                   example: \"An error occurred on the server.\"\r\n */\r\n\r\n        // Get Learning Module \r\n        router.get('/:id', validateRequestSchema( GetLearningModuleSchema ), learningModuleController.get.bind( learningModuleController ) )\r\n\r\n        // Update Learning Module \r\n        router.patch('/:id', validateRequestSchema( UpdateLearningModuleSchema ), learningModuleController.update.bind( learningModuleController ) )\r\n\r\n\r\n        // Delete Learning Module \r\n        router.delete('/:id', validateRequestSchema( DeleteLearningModuleSchema), learningModuleController.delete.bind( learningModuleController ) )\r\n\r\n        // Get Learning Module Part \r\n        router.get('/:moduleId/parts/:partNumber', validateRequestToken ,validateRequestSchema( GetLearningModulePartValidationSchema ), learningModuleController.getPart.bind( learningModuleController))\r\n\r\n        // Publish Learning Module \r\n        router.patch('/:id/publish', validateRequestSchema( PublishLearningModuleValidationSchema ), learningModuleController.publish.bind( learningModuleController))\r\n    \r\n        app.use('/api/v1/modules', router )\r\n\r\n        logger.info(\"Learning Module Routes Built\")\r\n    }\r\n    catch(e: any)\r\n    {\r\n        logger.error(e,\"LEARNING MODULE ROUTES ERROR\") \r\n    }\r\n}"],"names":[],"mappings":";;;;;;;AAcA,oDAuNC;AAnOD,qCAAyC;AACzC,uEAA8C;AAC9C,wGAAmG;AACnG,kGAA8F;AAC9F,6FAAsN;AACtN,oHAA+G;AAC/G,6FAAyG;AACzG,kDAA4D;AAG5D,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAA;AAEvB,SAAgB,oBAAoB,CAAC,GAAY;IAE7C,IACA,CAAC;QAEG,MAAM,wBAAwB,GAAG,IAAI,oDAAwB,EAAE,CAAA;QAC/D,MAAM,4BAA4B,GAAG,IAAI,4DAA4B,EAAE,CAAA;QAgGvE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAA,6CAAqB,EAAE,kDAA0B,CAAC,EAAE,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAE,wBAAwB,CAAE,CAAC,CAAA;QA0FtI,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAA,6CAAqB,EAAE,+CAAuB,CAAE,EAAE,wBAAwB,CAAC,GAAG,CAAC,IAAI,CAAE,wBAAwB,CAAE,CAAE,CAAA;QAGpI,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAA,6CAAqB,EAAE,kDAA0B,CAAE,EAAE,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAE,wBAAwB,CAAE,CAAE,CAAA;QAI5I,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAA,6CAAqB,EAAE,kDAA0B,CAAC,EAAE,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAE,wBAAwB,CAAE,CAAE,CAAA;QAG5I,MAAM,CAAC,GAAG,CAAC,8BAA8B,EAAE,6BAAoB,EAAE,IAAA,6CAAqB,EAAE,6DAAqC,CAAE,EAAE,wBAAwB,CAAC,OAAO,CAAC,IAAI,CAAE,wBAAwB,CAAC,CAAC,CAAA;QAGlM,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,IAAA,6CAAqB,EAAE,6DAAqC,CAAE,EAAE,wBAAwB,CAAC,OAAO,CAAC,IAAI,CAAE,wBAAwB,CAAC,CAAC,CAAA;QAE9J,GAAG,CAAC,GAAG,CAAC,iBAAiB,EAAE,MAAM,CAAE,CAAA;QAEnC,gBAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAA;IAC/C,CAAC;IACD,OAAM,CAAM,EACZ,CAAC;QACG,gBAAM,CAAC,KAAK,CAAC,CAAC,EAAC,8BAA8B,CAAC,CAAA;IAClD,CAAC;AACL,CAAC","debug_id":"95b67d1b-f5f2-5f3a-871e-b69902c21f12"}