{"version":3,"file":"check.js","sourceRoot":"/","sources":["routes/common/check.ts"],"names":[],"mappings":";;AAAA,iDAAoD;AAWpD,SAAS,KAAK,CACZ,MAAe,EACf,MAAsC;IAEtC,OAAO,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAClD,CAAC;AAKD,SAAS,SAAS,CAAC,GAAY;IAC7B,IAAI,CAAC,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QACrC,OAAO,GAAG,CAAC;IACb,CAAC;SAAM,CAAC;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;AACH,CAAC;AAOD,SAAS,KAAK,CACZ,MAAe,EACf,MAAsC;IAEtC,OAAO,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAClD,CAAC;AAKD,SAAS,SAAS,CAAC,GAAY;IAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,CAAC;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;AACH,CAAC;AAOD,SAAS,MAAM,CACb,MAAe,EACf,MAAsC;IAEtC,OAAO,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;AACnD,CAAC;AAKD,SAAS,UAAU,CAAC,GAAY;IAC9B,IAAI,OAAO,GAAG,KAAK,SAAS,EAAE,CAAC;QAC7B,OAAO,GAAG,CAAC;IACb,CAAC;SAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QACnC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACxB,IAAI,GAAG,KAAK,MAAM,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC;QACd,CAAC;aAAM,IAAI,GAAG,KAAK,OAAO,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC;QACf,CAAC;aAAM,CAAC;YACN,OAAO,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;SAAM,CAAC;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;AACH,CAAC;AAKD,SAAS,OAAO,CACd,MAAe,EACf,KAAa,EACb,WAA2C;IAE3C,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAC1B,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;QACrB,OAAO,GAAG,CAAC;IACb,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,uBAAa,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;AACH,CAAC;AAQD,SAAS,aAAa,CACpB,MAAe,EACf,MAAsC,EACtC,OAAwC;IAGxC,IAAI,MAAM,YAAY,KAAK,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACnC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,uBAAa,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC;QACH,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACpC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;QACtB,OAAO,GAAG,CAAC;IACb,CAAC;IAED,MAAM,IAAI,uBAAa,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAKD,kBAAe;IACb,KAAK;IACL,KAAK;IACL,MAAM;IACN,OAAO;CACC,CAAC","sourcesContent":["import { ValidationErr } from '@src/common/classes';\n\n\ntype TReqObj = Record<string, unknown>;\n\n\n/**\n * Check that param/s is a string\n */\nfunction isStr(reqObj: TReqObj, params: string): string;\nfunction isStr(reqObj: TReqObj, params: ReadonlyArray<string>): string[];\nfunction isStr(\n  reqObj: TReqObj,\n  params: string | ReadonlyArray<string>,\n): string | string[] {\n  return _checkWrapper(reqObj, params, _checkStr);\n}\n\n/**\n * Check validator for string\n */\nfunction _checkStr(val: unknown): string | undefined {\n  if (!!val && typeof val === 'string') {\n    return val;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Check that param/s is a number.\n */\nfunction isNum(reqObj: TReqObj, params: string): number;\nfunction isNum(reqObj: TReqObj, params: ReadonlyArray<string>): number[];\nfunction isNum(\n  reqObj: TReqObj,\n  params: string | ReadonlyArray<string>,\n): number | number[] {\n  return _checkWrapper(reqObj, params, _checkNum);\n}\n\n/**\n * Check validator for string\n */\nfunction _checkNum(val: unknown): number | undefined {\n  const valF = Number(val);\n  if (!isNaN(valF)) {\n    return valF;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Check that param/s is a number\n */\nfunction isBool(reqObj: TReqObj, params: string): boolean;\nfunction isBool(reqObj: TReqObj, params: ReadonlyArray<string>): boolean[];\nfunction isBool(\n  reqObj: TReqObj,\n  params: string | ReadonlyArray<string>,\n): boolean | boolean[] {\n  return _checkWrapper(reqObj, params, _checkBool);\n}\n\n/**\n * Check validator for string\n */\nfunction _checkBool(val: unknown): boolean | undefined {\n  if (typeof val === 'boolean') {\n    return val;\n  } else if (typeof val === 'string') {\n    val = val.toLowerCase();\n    if (val === 'true') {\n      return true;\n    } else if (val === 'false') {\n      return false;\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Check that param satisfies the validator function.\n */\nfunction isValid<T>(\n  reqObj: TReqObj,\n  param: string,\n  validatorFn: (param: unknown) => param is T,\n): T {\n  const val = reqObj[param];\n  if (validatorFn(val)) {\n    return val;\n  } else {\n    throw new ValidationErr(param);\n  }\n}\n\n\n// **** Shared Helpers **** //\n\n/**\n * Do stuff based on whether or not params is an array\n */\nfunction _checkWrapper<T>(\n  reqObj: TReqObj,\n  params: string | ReadonlyArray<string>,\n  checkFn: (val: unknown) => T | undefined,\n): T | T[] {\n  // If is array\n  if (params instanceof Array) {\n    const retVal: T[] = [];\n    for (const param of params) {\n      const val = checkFn(reqObj[param]);\n      if (val !== undefined) {\n        retVal.push(val);\n      } else {\n        throw new ValidationErr(param);\n      }\n    }\n    return retVal;\n  }\n  // If not an array\n  const val = checkFn(reqObj[params]);\n  if (val !== undefined) {\n    return val;\n  }\n  // Throw error\n  throw new ValidationErr(params);\n}\n\n\n// **** Export Default **** //\n\nexport default {\n  isStr,\n  isNum,\n  isBool,\n  isValid,\n} as const;"]}