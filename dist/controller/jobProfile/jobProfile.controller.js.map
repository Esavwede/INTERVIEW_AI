{"version":3,"file":"jobProfile.controller.js","sources":["controller/jobProfile/jobProfile.controller.ts"],"sourceRoot":"/","sourcesContent":["\r\n\r\nimport { AnyAppError } from \"@src/util/Errors/Endpoints/anyAppError\"\r\nimport { Request, Response } from \"express-serve-static-core\"\r\nimport   logger from \"@src/system/logger/logger\"\r\nimport { JobProfileService } from \"@src/services/jobProfile/jobProfile.service\"\r\nimport { CreateJobProfileSchema, DeleteJobProfileSchema } from \"@src/schemas/jobProfile/jobProfile.schema\"\r\nimport { JobProfileRepo } from \"@src/repos/jobProfile/jobProfile.repo\"\r\nimport { uploadFile } from \"@src/util/upload/doc/uploadDocToCloud\"\r\nimport { generateJobRoleFromResume } from \"@src/util/jobRoleGenerator/generateJobRole\"\r\n\r\n\r\nexport class JobProfileController\r\n{\r\n\r\n    protected jobProfileService: JobProfileService \r\n\r\n    constructor( )\r\n    {\r\n        const jobProfileRepo = new JobProfileRepo() \r\n        this.jobProfileService = new JobProfileService( jobProfileRepo )\r\n    }\r\n\r\n    // Add a new Job Profile To a User's Job Profiles \r\n    async create(\r\n        req: Request<{},{},CreateJobProfileSchema['body']>, \r\n        res: Response \r\n    )\r\n    {\r\n        try \r\n        {\r\n\r\n            // Data \r\n            const userId = req.user?._id \r\n            const userLogContext = req.context \r\n            const  { jobRole, experienceLevel }  = req.body  \r\n\r\n            if( !req.file ){ return res.status(400).json({ success: false, msg:\"Please Input a Valid Resume \"})}\r\n\r\n            /** Ensure User Context Exists */\r\n            if( !userLogContext  || !userId )\r\n            {\r\n                logger.warn(`Request Context Missing for User: ${ userId }`)\r\n                return res.status(500).json({ success: false, msg: \"Server Error\"})\r\n            }\r\n\r\n            /** Create Child Logger */\r\n            const childLogger = logger.child( userLogContext )\r\n\r\n            const { public_id, secure_url } = await uploadFile( req.file?.path, childLogger ) \r\n\r\n            // Upload Resume \r\n            const jobProfileDoc = { jobRole, experienceLevel, resumeUrl: secure_url, resumeId: public_id }\r\n\r\n            // Check if User has not created a job profile before \r\n            const userHasCreatedJobProfileBefore = req.user?.userHasCreatedFirstJobProfile  \r\n\r\n            if( userHasCreatedJobProfileBefore )\r\n            {\r\n                // Adds Job profile to user job profiles \r\n                childLogger.debug(`User ${ userId } has Job profile. Adding new job profile to user job profiles `)\r\n                await this.jobProfileService.addNewJobProfileToJobProfiles(userId, jobProfileDoc, childLogger) \r\n            }\r\n            else \r\n            {\r\n                // Creates New Job Profile For User and adds a Job Profile Entry to User Job Profiles \r\n                childLogger.debug(`User ${ userId } does not have an existing Job Profile. Creating new Job profile and adding new JobProfileEntry `)\r\n                await this.jobProfileService.createNewJobProfile( userId, jobProfileDoc, childLogger) \r\n            }\r\n\r\n            \r\n            res.status(201).json({ success: true, msg:\"Job Profile Created\" })\r\n\r\n            // Generate Job Role For User In the Background \r\n            const resumePath = req.resumePath || ''  \r\n          return  generateJobRoleFromResume( userId, jobRole, experienceLevel, resumePath ) \r\n        }\r\n        catch(err: any)\r\n        {\r\n            const e = err as AnyAppError \r\n\r\n            if( !e.statusCode )\r\n                {\r\n                    logger.error(e,\"Unkown_Server_Error\")\r\n                    return res.status(500).json({ success: false, msg:\"Server Error\" })\r\n                }\r\n                console.dir(e ) \r\n            return res.status( e.statusCode ).json({ success: false, msg: e.message })\r\n        }\r\n    }\r\n\r\n    \r\n    async getUserJobProfiles(req: Request, res: Response )\r\n    {\r\n        try \r\n        {\r\n\r\n            // Data \r\n            const userId = req.user?._id \r\n            const userLogContext = req.context\r\n\r\n            if( !userLogContext ) return res.status(500).json({ success: false, msg:\"Server Error \"})\r\n\r\n            // User Logger \r\n            const childLogger = logger.child(userLogContext)\r\n\r\n\r\n            if( !userId ) return res.status(500).json({ success: false, msg:\"Server Error \"})\r\n            const userJobProfiles = await this.jobProfileService.getUserJobProfiles( userId, childLogger )\r\n            \r\n\r\n            // User Does'nt Have any Job Profile Entries \r\n            if( userJobProfiles === null ) return res.status(200).json({ success: true, data:{ userJobProfiles } })\r\n            \r\n            // Return User Job profiles, from User Job Profile \r\n            if( userJobProfiles ) return res.status(200).json({success: true, data:{ userJobProfiles }} )\r\n\r\n            // User Profile Not Found\r\n            return res.status(404).json({ success: true, msg:`User Has Not Created Any Job Profile Yet `})\r\n        }\r\n        catch(e: any )\r\n        {\r\n            return res.status(500).json({ success: false, msg: e.message })\r\n        }\r\n    }\r\n\r\n\r\n    async deleteJobProfileFromJobProfiles( req: Request< DeleteJobProfileSchema['params']>, res: Response )\r\n    {\r\n        try \r\n        {\r\n            const userId = req.user?._id \r\n            const jobProfileId = req.params.id \r\n            const userLogContext = req.context \r\n\r\n\r\n            if( !userLogContext ) return res.status(500).json({success: false, msg:\"Server Error\"})\r\n            if( !userId || !jobProfileId ) return res.status( 400 ).json({ success: false, msg:\"Job Profile Id not in request params\"})\r\n\r\n\r\n            const childLogger = logger.child(userLogContext) \r\n            await this.jobProfileService.deleteJobProfileEntry( userId, jobProfileId, childLogger) \r\n\r\n            return res.status(200).json({ success: true, msg:\"Job Profile deleted successfully\"})\r\n        }\r\n        catch(err: any)\r\n        {\r\n            const e = err as AnyAppError \r\n\r\n            if( !e.statusCode ) return res.status(500).json({ success: false, msg:\"Server Error\"})\r\n            \r\n            return res.status( e.statusCode ).json({ success: false, msg: e.message } )\r\n        }\r\n    }\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAIA,uEAAgD;AAChD,oFAA+E;AAE/E,2EAAsE;AACtE,4EAAkE;AAClE,gFAAsF;AAGtF,MAAa,oBAAoB;IAK7B;QAEI,MAAM,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAA;QAC3C,IAAI,CAAC,iBAAiB,GAAG,IAAI,sCAAiB,CAAE,cAAc,CAAE,CAAA;IACpE,CAAC;IAGK,MAAM,CACR,GAAkD,EAClD,GAAa;;;YAGb,IACA,CAAC;gBAGG,MAAM,MAAM,GAAG,MAAA,GAAG,CAAC,IAAI,0CAAE,GAAG,CAAA;gBAC5B,MAAM,cAAc,GAAG,GAAG,CAAC,OAAO,CAAA;gBAClC,MAAO,EAAE,OAAO,EAAE,eAAe,EAAE,GAAI,GAAG,CAAC,IAAI,CAAA;gBAE/C,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;oBAAC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,8BAA8B,EAAC,CAAC,CAAA;gBAAA,CAAC;gBAGpG,IAAI,CAAC,cAAc,IAAK,CAAC,MAAM,EAC/B,CAAC;oBACG,gBAAM,CAAC,IAAI,CAAC,qCAAsC,MAAO,EAAE,CAAC,CAAA;oBAC5D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,cAAc,EAAC,CAAC,CAAA;gBACvE,CAAC;gBAGD,MAAM,WAAW,GAAG,gBAAM,CAAC,KAAK,CAAE,cAAc,CAAE,CAAA;gBAElD,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,MAAM,IAAA,6BAAU,EAAE,MAAA,GAAG,CAAC,IAAI,0CAAE,IAAI,EAAE,WAAW,CAAE,CAAA;gBAGjF,MAAM,aAAa,GAAG,EAAE,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAA;gBAG9F,MAAM,8BAA8B,GAAG,MAAA,GAAG,CAAC,IAAI,0CAAE,6BAA6B,CAAA;gBAE9E,IAAI,8BAA8B,EAClC,CAAC;oBAEG,WAAW,CAAC,KAAK,CAAC,QAAS,MAAO,gEAAgE,CAAC,CAAA;oBACnG,MAAM,IAAI,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,MAAM,EAAE,aAAa,EAAE,WAAW,CAAC,CAAA;gBAClG,CAAC;qBAED,CAAC;oBAEG,WAAW,CAAC,KAAK,CAAC,QAAS,MAAO,kGAAkG,CAAC,CAAA;oBACrI,MAAM,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAE,MAAM,EAAE,aAAa,EAAE,WAAW,CAAC,CAAA;gBACzF,CAAC;gBAGD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAC,qBAAqB,EAAE,CAAC,CAAA;gBAGlE,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,IAAI,EAAE,CAAA;gBACzC,OAAQ,IAAA,2CAAyB,EAAE,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,CAAE,CAAA;YACnF,CAAC;YACD,OAAM,GAAQ,EACd,CAAC;gBACG,MAAM,CAAC,GAAG,GAAkB,CAAA;gBAE5B,IAAI,CAAC,CAAC,CAAC,UAAU,EACb,CAAC;oBACG,gBAAM,CAAC,KAAK,CAAC,CAAC,EAAC,qBAAqB,CAAC,CAAA;oBACrC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,cAAc,EAAE,CAAC,CAAA;gBACvE,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE,CAAA;gBACnB,OAAO,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,UAAU,CAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;YAC9E,CAAC;QACL,CAAC;KAAA;IAGK,kBAAkB,CAAC,GAAY,EAAE,GAAa;;;YAEhD,IACA,CAAC;gBAGG,MAAM,MAAM,GAAG,MAAA,GAAG,CAAC,IAAI,0CAAE,GAAG,CAAA;gBAC5B,MAAM,cAAc,GAAG,GAAG,CAAC,OAAO,CAAA;gBAElC,IAAI,CAAC,cAAc;oBAAG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,eAAe,EAAC,CAAC,CAAA;gBAGzF,MAAM,WAAW,GAAG,gBAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;gBAGhD,IAAI,CAAC,MAAM;oBAAG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,eAAe,EAAC,CAAC,CAAA;gBACjF,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAE,MAAM,EAAE,WAAW,CAAE,CAAA;gBAI9F,IAAI,eAAe,KAAK,IAAI;oBAAG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAC,EAAE,eAAe,EAAE,EAAE,CAAC,CAAA;gBAGvG,IAAI,eAAe;oBAAG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAC,EAAE,eAAe,EAAE,EAAC,CAAE,CAAA;gBAG7F,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAC,2CAA2C,EAAC,CAAC,CAAA;YAClG,CAAC;YACD,OAAM,CAAM,EACZ,CAAC;gBACG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;YACnE,CAAC;QACL,CAAC;KAAA;IAGK,+BAA+B,CAAE,GAA+C,EAAE,GAAa;;;YAEjG,IACA,CAAC;gBACG,MAAM,MAAM,GAAG,MAAA,GAAG,CAAC,IAAI,0CAAE,GAAG,CAAA;gBAC5B,MAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAA;gBAClC,MAAM,cAAc,GAAG,GAAG,CAAC,OAAO,CAAA;gBAGlC,IAAI,CAAC,cAAc;oBAAG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,cAAc,EAAC,CAAC,CAAA;gBACvF,IAAI,CAAC,MAAM,IAAI,CAAC,YAAY;oBAAG,OAAO,GAAG,CAAC,MAAM,CAAE,GAAG,CAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,sCAAsC,EAAC,CAAC,CAAA;gBAG3H,MAAM,WAAW,GAAG,gBAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;gBAChD,MAAM,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAE,MAAM,EAAE,YAAY,EAAE,WAAW,CAAC,CAAA;gBAEtF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAC,kCAAkC,EAAC,CAAC,CAAA;YACzF,CAAC;YACD,OAAM,GAAQ,EACd,CAAC;gBACG,MAAM,CAAC,GAAG,GAAkB,CAAA;gBAE5B,IAAI,CAAC,CAAC,CAAC,UAAU;oBAAG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,cAAc,EAAC,CAAC,CAAA;gBAEtF,OAAO,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,UAAU,CAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,CAAE,CAAA;YAC/E,CAAC;QACL,CAAC;KAAA;CACJ;AA9ID,oDA8IC","debug_id":"a81dcdae-e33c-5751-86cb-c4467de30a9e"}