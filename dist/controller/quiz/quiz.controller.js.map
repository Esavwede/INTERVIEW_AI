{"version":3,"file":"quiz.controller.js","sources":["controller/quiz/quiz.controller.ts"],"sourceRoot":"/","sourcesContent":["import logger from \"@src/system/logger/logger\";\r\nimport { Request, Response} from \"express-serve-static-core\"\r\nimport { QuestionRepo } from \"@src/repos/question/question.repo\";\r\nimport { QuestionService } from \"@src/services/question/question.service\";\r\nimport { QuizSservice } from \"@src/services/quiz/quiz.service\";\r\nimport { QuizRepo } from \"@src/repos/quiz/quiz.repo\";\r\nimport { CreateQuizSchema, DeleteQuizSchema, FindQuizSchema, UpdateQuizSchema } from \"@src/schemas/quiz/quiz.schema\";\r\nimport { NotFoundError } from \"@src/util/Errors/Endpoints/notFoundError\";\r\nimport { ServerError } from \"@src/util/Errors/Endpoints/serverError\";\r\n\r\n\r\nexport class QuizController  \r\n{\r\n\r\n    private questionService \r\n    private quizService \r\n\r\n    constructor( ) \r\n    {\r\n        \r\n        const questionRepo = new QuestionRepo() \r\n        this.questionService = new QuestionService( questionRepo ) \r\n\r\n        const quizRepo = new QuizRepo() \r\n        this.quizService = new QuizSservice( quizRepo ) \r\n    \r\n    }\r\n\r\n\r\n    async create(req: Request<{},{}, CreateQuizSchema[\"body\"]>, res: Response )\r\n    {\r\n        try \r\n        {\r\n\r\n            logger.info(\"CONTROLLER: Creating New Quiz \") \r\n            \r\n           const { questions, description, title, moduleId, modulePartNumber  } = req.body \r\n\r\n           const questionIds  = await this.questionService.create( questions )\r\n\r\n            \r\n\r\n            const quizBody = { description, title, moduleId, modulePartNumber, questions: questionIds }\r\n\r\n            const quizCreated = await this.quizService.create( quizBody ) \r\n\r\n            if( !quizCreated )\r\n            {\r\n                return res.status(500).json({ success: false, msg:\"SERVER ERROR\" })\r\n            }\r\n            \r\n            return res.status(201).json({ success: true, msg:\"QUIZ CREATED\" })\r\n\r\n        }\r\n        catch(e: any)\r\n        {\r\n            logger.error(e,'')\r\n        }\r\n    }\r\n\r\n    async get( req: Request< FindQuizSchema['params']>, res: Response ) \r\n    {\r\n        try \r\n        {\r\n               const quiz = await this.quizService.find( req.params.id )\r\n\r\n               return res.status(200).json({ success: true, data: quiz })\r\n\r\n        }\r\n        catch(e: any)\r\n        {\r\n\r\n                if( e instanceof NotFoundError )\r\n                {\r\n                    return res.status(e.statusCode).json({ success: false, msg: e.message })\r\n                }\r\n\r\n                if( e instanceof ServerError )\r\n                {\r\n                    return res.status( e.statusCode ).json({ success: false, msg: e.message })\r\n                }\r\n        }\r\n    }\r\n\r\n    async update( req: Request<UpdateQuizSchema[\"params\"],{}, UpdateQuizSchema[\"body\"]>, res: Response )\r\n    {\r\n        try \r\n        {   \r\n            await this.quizService.update(  req.params.id,  req.body )\r\n           \r\n            return res.status(200).json({ success: true, msg:\"Quiz updated successfully \"})\r\n        }\r\n        catch(e: any)\r\n        {   \r\n                return res.status( e.statusCode ).json({ success: false, msg: e.message })\r\n        }\r\n    }\r\n\r\n    async delete( req: Request<DeleteQuizSchema[\"params\"]>, res: Response )\r\n    {\r\n        try \r\n        {   \r\n            const deletedCount = await this.quizService.delete( req.params.id )\r\n            \r\n            if( deletedCount !== 1 ) \r\n            {\r\n                return res.status(200).json({ success: true, msg:\"Quiz Does Not Exist In Database \"})\r\n            }\r\n                return res.status(200).json({ success: true, msg:\"Quiz Deleted Successfully \"})\r\n        }\r\n        catch(e: any )\r\n        {\r\n            return res.status( e.statusCode ).json({ success: false, msg: e.message })\r\n        }\r\n    }\r\n\r\n}"],"names":[],"mappings":"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","debug_id":"f082c4a0-a4e0-5183-8ee3-c6896c0cff92"}