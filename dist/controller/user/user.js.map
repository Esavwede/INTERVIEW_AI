{"version":3,"file":"user.js","sources":["controller/user/user.ts"],"sourceRoot":"/","sourcesContent":["import { UserService } from \"@src/services/user/user\";\r\nimport { UserRepository } from \"@src/repos/user/user.repo\";\r\nimport  { Request, Response } from \"express-serve-static-core\" \r\nimport { SignupInput, VerifyUserSchema} from \"@src/schemas/user/signupSchema\";\r\nimport { UserSigninDTO } from \"@src/DTOs/user/user\";\r\nimport path from \"path\";\r\nimport { config } from \"dotenv\"\r\nconfig() \r\n\r\n// Interfaces \r\nimport { NotFoundError } from \"@src/util/Errors/Endpoints/notFoundError\";\r\nimport { SaveLearningModuleOverviewSchema } from \"@src/schemas/learningModule/learningModule.schema\";\r\nimport { ILearningModuleOverview } from \"@src/models/learningProfile\";\r\nimport { AnyAppError } from \"@src/util/Errors/Endpoints/anyAppError\";\r\nimport { ConflictError } from \"@src/util/Errors/Endpoints/conflictError\";\r\nimport logger from \"@src/system/logger/logger\";\r\n\r\n\r\nexport class UserController \r\n{\r\n\r\n    private userService: UserService\r\n\r\n    constructor()\r\n    {\r\n        const userRepository = new UserRepository() \r\n        this.userService = new UserService( userRepository ) \r\n    }   \r\n\r\n\r\n    async signup(req: Request<{}, {}, SignupInput[\"body\"]>, res: Response)\r\n    {\r\n        try \r\n        {\r\n                 \r\n\r\n        logger.info(`User_Signup_Controller: Signin Up New User`)\r\n\r\n        const email = req.body.email \r\n        const userExists = await this.userService.findByEmail( email ) \r\n\r\n        if( userExists )\r\n        {\r\n            logger.info(`User Email: ${ email } Taken `)\r\n            throw new ConflictError(\"Account with this email exists\")\r\n        }\r\n\r\n        const protocol = req.protocol || 'https' || 'http'\r\n        const host = req.get('host') || 'localhost:3000'\r\n        const domain = `${protocol}://${host}`\r\n\r\n        await this.userService.create( req.body, domain  )\r\n        \r\n        return res.status(201).json({ status: \"success\", msg:\"User Signup Successfull\" })\r\n\r\n        }\r\n        catch(e: any )\r\n        {\r\n            const err: AnyAppError = e as AnyAppError\r\n\r\n            if( !err.statusCode ) return res.status(500).json({ success: false, msg:\"SERVER ERROR\"})\r\n\r\n            return res.status( err.statusCode ).json({ success: false, msg: err.message })\r\n        }\r\n    }\r\n\r\n\r\n    async signin( req: Request<{}, {}, UserSigninDTO>, res: Response )\r\n    {\r\n        try \r\n        {\r\n             const { password, email } = req.body \r\n\r\n             const response = await this.userService.signin( email, password )\r\n\r\n             return res.status(200).json( response ) \r\n        \r\n        }\r\n        catch(e: any )\r\n        {\r\n            const err = e as AnyAppError\r\n\r\n            if( !err.statusCode ) return res.status(500).json({ success: false, msg:\"Server Error\"}) \r\n            return res.status( err.statusCode  ).json({ success: false, message: e.message })\r\n        }\r\n    }\r\n\r\n    async verifyUser( req: Request<{},{},{}, VerifyUserSchema['query']>, res: Response)\r\n    {\r\n        try \r\n        {\r\n            const userID = req.query.token \r\n\r\n            await this.userService.verifyUser( userID ) \r\n        \r\n            return res.status(200).json({ success: true, msg:\"User Verified\"})\r\n        }\r\n        catch(e: any)\r\n        {\r\n            const err = e as AnyAppError\r\n\r\n            if( !err.statusCode ) return res.status(500).json({ success: false, msg:\"Server Error\"})\r\n\r\n            return res.status( err.statusCode ).json({ success: false, msg: err.message })\r\n        }\r\n    }\r\n\r\n    async skipOnboarding(req: Request, res: Response)\r\n    {\r\n        try \r\n        {\r\n            const userId =  req.user?._id \r\n            if( !userId ){ return res.status(400).json({ success: false, msg:\"could not authenticate user\"})}\r\n\r\n            await this.userService.setUserNewToFalse( userId )\r\n            return res.status(200).json({ success: true, msg:\"Onboarding Skipped\"})\r\n        }\r\n        catch(e: any)\r\n        {\r\n            if( e instanceof NotFoundError )\r\n            {\r\n                return res.status( e.statusCode ).json({ success: false, msg: e.message })\r\n            }\r\n\r\n                return res.status(500).json({ success: false, msg: \"Server Error\"})\r\n        }\r\n    }\r\n\r\n    async addLearningModulesToUserProfile(req: Request<{},{},SaveLearningModuleOverviewSchema['body']>, res: Response)\r\n    {\r\n        try \r\n        {\r\n            const userId = req.user?._id \r\n            if( !userId ) return res.status(401).json({ success: false, msg:\"could not authenticated user\"})\r\n            \r\n            const learningModuleOverview = req.body.learningModules as ILearningModuleOverview[]\r\n            await this.userService.saveUserLearningModuleOverview( userId, learningModuleOverview)\r\n            return res.status(200).json({ success: true, msg:\"Learning Modules Overview Saved to user Learning Profile\"})\r\n        }\r\n        catch(e: any)\r\n        {\r\n           \r\n                const err = e as AnyAppError\r\n                if( !err.statusCode ) return res.status(500).json({ success: false, msg: 'Server Error' })\r\n                \r\n                return res.status( err.statusCode ).json({ success: false, msg: err.message }) \r\n        }\r\n    }\r\n\r\n}"],"names":[],"mappings":"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","debug_id":"a1435df5-19ae-59d7-9957-cf38137c2121"}