{"version":3,"file":"learningModulePart.repo.js","sources":["repos/learningModulePart/learningModulePart.repo.ts"],"sourceRoot":"/","sourcesContent":["import { ICreateLearningModulePart_Req } from \"@src/DTOs/learningModulePart/learningModulePart.dto\";\r\nimport { ILearningModulePart, IPartContent, LearningModule } from \"@src/models/LearningModule\";\r\nimport logger from \"@src/system/logger/logger\";\r\nimport mongoose,{ ObjectId } from \"mongoose\";\r\n\r\n\r\n\r\nexport class LearningModulePartRepo \r\n{\r\n    \r\n    constructor()\r\n    {\r\n      \r\n    }\r\n\r\n\r\n    async create( moduleID: string, part: ICreateLearningModulePart_Req): Promise<void> \r\n    {\r\n        await LearningModule.findByIdAndUpdate( moduleID, { $addToSet: {  parts: part }, $inc:{ numberOfParts: 1 } },{ new: false })\r\n    }\r\n\r\n    \r\n    async find( learningModuleId: string, partIndex: number )\r\n    {   \r\n\r\n        \r\n        const _id =  learningModuleId \r\n    \r\n            const result = await LearningModule.findOne(\r\n                { _id },\r\n                {  parts: { $slice: [partIndex, 1] }, _id: 0, quizId: 0, title: 0, area: 0, stage: 0, description: 0, imgSrc: 0, numberOfParts: 0 }\r\n              );\r\n\r\n            if( !result ) \r\n            {\r\n                return null \r\n            }\r\n            \r\n            logger.info('--Debug--1')\r\n            logger.info( result.parts ) \r\n            \r\n            return result.parts \r\n    }   \r\n\r\n\r\n    async update( learningModuleID: string, updates: Pick<IPartContent, '_id' | 'type' | 'value'>[] ): Promise< number > \r\n    {\r\n\r\n      // console.dir( updates ) \r\n\r\n      //     const bulkOperations = updates.map(update => ({\r\n      //       updateOne: {\r\n      //         filter: { learningModuleID: learningModuleID, \"parts.content._id\": update._id },  // Find document containing the content with matching _id\r\n      //         update: { \r\n      //           $set: { \r\n      //             \"parts.$[].content.$[contentItem].type\": update.type,\r\n      //             \"parts.$[].content.$[contentItem].value\": update.value\r\n      //           }\r\n      //         },\r\n      //         arrayFilters: [ { \"contentItem._id\": update._id } ]  // Filter to match specific content _id\r\n      //       }\r\n      //     }));\r\n          \r\n      //     await LearningModule.bulkWrite(bulkOperations);\r\n          \r\n\r\n        \r\n      //   const result  = await LearningModule.bulkWrite( bulkOperations )\r\n      //   console.log(\" Learning Module Part Updated :\")\r\n      //   console.log( result ) \r\n      //   return result.ok \r\n    \r\n      const { modifiedCount } = await LearningModule.updateOne({ _id: learningModuleID },{ $set:{ parts: updates } })\r\n      return modifiedCount \r\n    }\r\n\r\n\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,+DAA+F;AAC/F,uEAA+C;AAK/C,MAAa,sBAAsB;IAG/B;IAGA,CAAC;IAGK,MAAM,CAAE,QAAgB,EAAE,IAAmC;;YAE/D,MAAM,+BAAc,CAAC,iBAAiB,CAAE,QAAQ,EAAE,EAAE,SAAS,EAAE,EAAG,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAC,EAAE,aAAa,EAAE,CAAC,EAAE,EAAE,EAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;QAChI,CAAC;KAAA;IAGK,IAAI,CAAE,gBAAwB,EAAE,SAAiB;;YAInD,MAAM,GAAG,GAAI,gBAAgB,CAAA;YAEzB,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,OAAO,CACvC,EAAE,GAAG,EAAE,EACP,EAAG,KAAK,EAAE,EAAE,MAAM,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,CACpI,CAAC;YAEJ,IAAI,CAAC,MAAM,EACX,CAAC;gBACG,OAAO,IAAI,CAAA;YACf,CAAC;YAED,gBAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;YACzB,gBAAM,CAAC,IAAI,CAAE,MAAM,CAAC,KAAK,CAAE,CAAA;YAE3B,OAAO,MAAM,CAAC,KAAK,CAAA;QAC3B,CAAC;KAAA;IAGK,MAAM,CAAE,gBAAwB,EAAE,OAAuD;;YA2B7F,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,+BAAc,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,gBAAgB,EAAE,EAAC,EAAE,IAAI,EAAC,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,CAAA;YAC/G,OAAO,aAAa,CAAA;QACtB,CAAC;KAAA;CAGJ;AAtED,wDAsEC","debug_id":"53dc39d9-13d6-5992-90eb-9ff158e76a61"}