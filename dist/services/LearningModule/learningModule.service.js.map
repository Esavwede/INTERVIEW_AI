{"version":3,"file":"learningModule.service.js","sourceRoot":"/","sources":["services/LearningModule/learningModule.service.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\nimport { IUpdateLearningModuleDTO } from \"@src/DTOs/learningModule/learningModule.dto\";\r\nimport LearningModuleRepo from \"@src/repos/LearningModule/learningModule.repo\";\r\nimport logger from \"@src/system/logger/logger\";\r\nimport { NotFoundError } from \"@src/util/Errors/Endpoints/notFoundError\";\r\nimport { ServerError } from \"@src/util/Errors/Endpoints/serverError\";\r\nimport { ILearningModule } from \"@src/models/LearningModule\";\r\nimport { LearningArea } from \"@src/models/area\";\r\nimport { UserService } from \"../user/user\";\r\nimport { UserRepository } from \"@src/repos/user/user.repo\";\r\nimport { LearningModulePartRepo } from \"@src/repos/learningModulePart/learningModulePart.repo\";\r\nimport { LearningModulePartService } from \"../learningModulePart/learningModulePart.service\";\r\n\r\n\r\nexport class LearningModuleService \r\n{\r\n\r\n    private userService:  UserService \r\n    private learningModulePartService: LearningModulePartService \r\n\r\n    constructor( private learningModuleRepo: LearningModuleRepo )\r\n    {\r\n        const userRepository = new UserRepository()\r\n        this.userService = new UserService( userRepository )    \r\n\r\n        const learningModulePartRepo = new LearningModulePartRepo() \r\n        this.learningModulePartService = new LearningModulePartService( learningModulePartRepo )\r\n    }\r\n\r\n    async create( learningModule:  Pick< ILearningModule,'title' | 'area' | 'stage' | 'description' | 'imgSrc' | 'isDraft' > )\r\n    {\r\n           try \r\n           {\r\n                    const newLearningModule = await this.learningModuleRepo.create( learningModule ) \r\n\r\n                    if( !newLearningModule )\r\n                    {\r\n                        logger.error(\"Learning Module Was Not Created\") \r\n                        return false \r\n                    }\r\n\r\n                    const learningModuleIsDraft = learningModule.isDraft \r\n\r\n                    if( learningModuleIsDraft  )\r\n                    {\r\n                        logger.info(\"Service: Learning Module Draft Created\")\r\n                        return newLearningModule \r\n                    }\r\n                    else \r\n                    {\r\n                         // Save learning Module Details to Area \r\n                         await LearningArea.updateOne({ _id: learningModule.area },{ $push: { learningModulesUnderArea: newLearningModule } })\r\n                         logger.info(\"Learning Module Published\")\r\n                    }\r\n                    \r\n           }\r\n           catch(e: any )\r\n           {\r\n                logger.error(e,'SERVICE: Error Occured While Creating Learning Module ')\r\n                throw new ServerError('SERVICE: Error Occured While Creating Learning Module ')\r\n           }\r\n    }\r\n\r\n    async get( learningModuleId: string  )\r\n    {\r\n            const learningModule = await this.learningModuleRepo.get( learningModuleId )\r\n\r\n            if( ! learningModule )\r\n            {\r\n                return false \r\n            }\r\n\r\n            logger.info(`SERVICE: Returning Learning Module with Id: ${ learningModuleId }`)\r\n            return learningModule \r\n    }\r\n\r\n    async update( moduleId: string, learningModuleFields: IUpdateLearningModuleDTO  ): Promise<void> \r\n    {\r\n        try \r\n        {\r\n            const modifiedCount = await this.learningModuleRepo.update( moduleId, learningModuleFields )\r\n\r\n            if( !modifiedCount )\r\n            {\r\n                throw new NotFoundError(`COULD NOT FIND LEARNING MODULE WITH ID: ${ moduleId }`)\r\n            }\r\n    \r\n        }\r\n        catch(e: any )\r\n        {\r\n            throw new ServerError(`SERVICE: \"SERVER_ERROR\" : Could Not Update Learning Module With ID: ${ moduleId }`)\r\n        }\r\n    }\r\n\r\n    async delete( moduleID: string ): Promise<void> \r\n    {\r\n        try \r\n        {\r\n            const deleteCount = await this.learningModuleRepo.delete( moduleID ) \r\n\r\n            if( deleteCount !== 1 )\r\n            {\r\n                logger.error(`SERVICE_ERROR: DELETE_LEARNING_MODULE --> COULD NOT FIND LEARNING MODULE WITH ${ moduleID } FOR DELETION `)\r\n                throw new NotFoundError(`COULD NOT FIND LEARNING MODULE WITH ${ moduleID } FOR DELETION `)\r\n            }\r\n\r\n            return \r\n        }\r\n        catch(e: any )\r\n        {\r\n              throw new ServerError(\"SERVER ENCOUNTERED ERROR WHILE DELETING LEARNING MODULE\")\r\n        }\r\n    }\r\n\r\n    async publish( learningModuleId: string, learningModule:  Pick< ILearningModule,'title' | 'area' | 'stage' | 'description' | 'imgSrc' | 'isDraft' | 'totalParts' > )\r\n    {\r\n        try \r\n        {\r\n            // Modify isDraft Property on module \r\n            const modifiedCount = await this.learningModuleRepo.update( learningModuleId, { isDraft: false } )\r\n\r\n\r\n            if( !modifiedCount )\r\n            {\r\n                logger.error(\"Did not Find Module To Publish\")\r\n                throw new NotFoundError(`COULD NOT FIND LEARNING MODULE WITH ID: ${ learningModuleId } to Publish`)\r\n            }\r\n\r\n              // Save learning Module Details to Area \r\n              const updatedData = await LearningArea.updateOne({ _id: learningModule.area },{ $push: { learningModulesUnderArea: learningModule } })\r\n              console.dir( updatedData ) \r\n\r\n              logger.info(\"Learning Module Published\")\r\n        }\r\n        catch(e)\r\n        {\r\n            logger.error(e,`Service: Error While Publishing Learning Module `)\r\n            throw e \r\n        }\r\n    }\r\n    \r\n    \r\n    async getPart( userId: string, learningModuleId: string, partNumber: number, totalParts: number ) \r\n    {\r\n        try \r\n        {\r\n\r\n            if( partNumber > totalParts || partNumber < 1 )\r\n            {\r\n                logger.error(`Part : ${ partNumber } does not exist on Learning Module: ${ learningModuleId } `)\r\n                throw new NotFoundError(`Part ${ partNumber } does not exit on Module`)\r\n            }\r\n     \r\n            var nextPartIndex = partNumber - 1 \r\n            const learningModulePart: any = await this.learningModuleRepo.getNextPart( learningModuleId, nextPartIndex ) \r\n\r\n           // // Check Part Exists \r\n            if( !learningModulePart )\r\n            {\r\n                logger.error(`Could Not Find Part: ${ nextPartIndex } of Module: ${ learningModuleId } `)\r\n                throw new NotFoundError(\"Could not find learning module part \")\r\n            } \r\n\r\n            // Update Currrent Part On User Learning Overview \r\n            await this.userService.updateLearningModuleCurrentPart( userId, learningModuleId, nextPartIndex )\r\n            \r\n            // Return Part \r\n            return learningModulePart         \r\n        }\r\n        catch(e: any )\r\n        {\r\n            logger.error(e,`Learning Module Service: Error Occured While getting next part of Learning Module: ${ learningModuleId }`)\r\n            throw e \r\n        }\r\n    }\r\n\r\n    async incrementNumberOfParts( moduleId: string )\r\n    {\r\n        await this.learningModuleRepo.incrementNumberOfParts( moduleId )\r\n    }\r\n\r\n    async decrementNumberOfParts( moduleId: string )\r\n    {\r\n        await this.learningModuleRepo.incrementNumberOfParts( moduleId )\r\n    }\r\n}   "]}