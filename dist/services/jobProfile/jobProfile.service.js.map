{"version":3,"file":"jobProfile.service.js","sources":["services/jobProfile/jobProfile.service.ts"],"sourceRoot":"/","sourcesContent":["import { IJobProfileEntry } from \"@src/models/JobProfile\";\r\nimport { JobProfileRepo } from \"@src/repos/jobProfile/jobProfile.repo\";\r\nimport logger from \"@src/system/logger/logger\";\r\nimport { NotFoundError } from \"@src/util/Errors/Endpoints/notFoundError\";\r\nimport { ServerError } from \"@src/util/Errors/Endpoints/serverError\";\r\nimport { UserService } from \"../user/user\";\r\nimport { UserRepository  } from \"@src/repos/user/user.repo\";\r\nimport { ConflictError } from \"@src/util/Errors/Endpoints/conflictError\";\r\nimport { Logger } from \"pino\";\r\n\r\n\r\n\r\nexport class JobProfileService \r\n{\r\n    private userService: UserService \r\n\r\n    constructor( private jobProfileRepo: JobProfileRepo )\r\n    {\r\n        const userRepo = new UserRepository() \r\n        this.userService = new UserService( userRepo )\r\n    }\r\n\r\n\r\n    async createNewJobProfile\r\n    (\r\n        userId: string, \r\n        jobProfileDoc: Pick< IJobProfileEntry, 'jobRole' | 'experienceLevel' | 'resumeUrl' | 'resumeId' >,\r\n        childLogger: Logger\r\n\r\n    ): Promise<void> \r\n    {\r\n        try \r\n        {\r\n            await this.jobProfileRepo.create( userId, jobProfileDoc, childLogger )\r\n\r\n            /** Connects To User Service to Update User  */\r\n            await this.userService.markUserHasCreatedFirstJobProfileAsFalse( userId ) \r\n\r\n            childLogger.debug(\"JOB_PROFILE_SERVICE: NEW JOB PROFILE CREATED FOR USER \" + userId )\r\n        }\r\n        catch(e: any )\r\n        {\r\n            if( e?.code === 11000 )\r\n            {\r\n                childLogger.error(e,`User Job Profile Exists In Database`)\r\n                throw new ConflictError(\"User Job Profile Exists. Add new Job Profile Entry \") \r\n            }\r\n\r\n            childLogger.error(e,`JOB_PROFILE_SERVICE: ERROR OCCURED WHILE CREATING NEW JOB PROFILE FOR USER: ${ userId }`)\r\n            throw new ServerError(\"Server Encountered Error While Creating Job Profile\" )\r\n        }\r\n    }\r\n\r\n\r\n    async addNewJobProfileToJobProfiles\r\n    (\r\n        userId: string, \r\n        jobProfileDoc: Pick< IJobProfileEntry, 'jobRole' | 'experienceLevel' | 'resumeUrl' | 'resumeId'>, \r\n        childLogger: Logger \r\n\r\n    ): Promise<void>\r\n    {\r\n        try \r\n        {\r\n            const modifiedCount = await this.jobProfileRepo.addNew( userId, jobProfileDoc, childLogger) \r\n\r\n            if( modifiedCount !== 1 )\r\n            {\r\n                logger.debug(`JOB_PROFILE_SERVICE: USER: ${ userId } JOB PROFILE NOT FOUND `)\r\n                throw new NotFoundError(`Job Profile Not Found`)\r\n            }\r\n            \r\n                childLogger.debug(`NEW JOB PROFILE ADDED TO USER: ${ userId } JOB PROFILES `)\r\n        }\r\n        catch(e: any )\r\n        {\r\n            childLogger.error(e,`JOB_PROFILE_SERVICE: COULD NOT ADD NEW JOB PROFILE TO USER: ${ userId } JOB PROFILES `)\r\n            \r\n            if( e instanceof NotFoundError ) throw e \r\n\r\n            throw e \r\n        }\r\n    }\r\n\r\n        // Get User Job Profiles \r\n        async getUserJobProfiles\r\n        (\r\n            userId: string,\r\n            childLogger: Logger\r\n        )\r\n        {\r\n            try \r\n            {\r\n                const userJobProfiles = await this.jobProfileRepo.getUserJobProfiles( userId ) \r\n\r\n                childLogger.debug(`Job_Profile_Service:    Received User: ${ userId } job profiles `)\r\n                childLogger.debug( userJobProfiles ) \r\n                return userJobProfiles\r\n            }\r\n            catch(e: any)\r\n            {\r\n                logger.error(e,`Job_Profile_Service: Could Not Get User Job Profiles`)\r\n                throw new ServerError(\"Server Error\")\r\n            }\r\n        }\r\n\r\n\r\n    async deleteJobProfileEntry( userId: string, jobProfileId: string, childLogger: Logger )\r\n    {\r\n        try \r\n        {\r\n            const deleted = await this.jobProfileRepo.deleteProfileFromProfiles( userId, jobProfileId )\r\n\r\n            if( !deleted ) throw new NotFoundError(`Did Not Find Job Profile with ID: ${ jobProfileId } for Deletion`)\r\n\r\n            logger.debug(`Job Profile: ${ jobProfileId } Deleted from User: ${ userId } learning Profiles `)\r\n        }\r\n        catch(e: any)\r\n        {\r\n            logger.error(e,\"error occured while deleting job profile \") \r\n            throw e \r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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","debug_id":"6386718b-7eca-5ed7-891f-cec5c9c9c0f7"}