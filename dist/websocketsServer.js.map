{"version":3,"file":"websocketsServer.js","sources":["websocketsServer.ts"],"sourceRoot":"/","sourcesContent":["\r\nimport { Server } from \"socket.io\"\r\nimport logger from \"./system/logger/logger\";\r\nimport http from \"http\"\r\nimport { AI_Interviewer } from \"./apps/AI_Interviewer/AI_Interviewer\";\r\nimport { IinterviewData } from \"./apps/AI_Interviewer/interfaces/interviewData\";\r\nimport { IinterviewSessionData } from \"./apps/AI_Interviewer/interfaces/interviewSessionData\";\r\nimport { initializeRedis } from \"./middleware/cache/redisCache\";\r\nimport { fetchUserResumeAsText } from \"./util/jobDescription/fetchUserResume\";\r\nimport { extractCompanyNameFromJobDescription } from \"./util/jobDescription/generateJobDescriptionFromResume\";\r\n\r\n\r\n\r\nexport async function initializeWebsocketsServer( server: http.Server )\r\n{\r\n    try \r\n    {\r\n\r\n\r\n        logger.info('Initializing Socket.io Server') \r\n\r\n        const res = await initializeRedis() \r\n        \r\n        if( !res?.RedisClient || !res.setCache )\r\n        {\r\n            return \r\n        }\r\n        \r\n        const { RedisClient, setCache } = res \r\n\r\n        /** Initialized Interviewer */\r\n        const Interviewer = new AI_Interviewer() \r\n\r\n    \r\n        /** Initialized Socket.io Server  */\r\n        const io: Server = new Server(server, {\r\n            cors: {\r\n                origin: \"*\", \r\n                methods: [\"GET\", \"POST\"]\r\n            }\r\n        })\r\n\r\n\r\n        \r\n        /** Setup Authentication Middleware  */\r\n        io.use((socket, next) => {\r\n\r\n            const { candidateFirstname, roleName, experienceLevel, jobDescription, resumeUrl } = socket.handshake.query       \r\n\r\n            if ( !candidateFirstname || !roleName || !experienceLevel || !jobDescription || !resumeUrl ) {\r\n\r\n                // Identify Missing Fields \r\n                socket.emit('INCOMPLETE_INTERVIEW_DATA', socket.handshake.query ) \r\n            }\r\n\r\n            // Store user details in socket instance\r\n            socket.data = { candidateFirstname, roleName, experienceLevel, jobDescription, resumeUrl};\r\n            next();\r\n        })\r\n        \r\n\r\n        \r\n        // Socket Server Event Listeners \r\n        io.on('connection',async (socket )=>{\r\n\r\n            logger.info(\"Client Connected To Socket Server \" + socket.id ) \r\n\r\n            let data = socket.data\r\n            \r\n            // Fetch Candidate Resume As Text \r\n            const userResume = await fetchUserResumeAsText(data.resumeUrl) \r\n\r\n            // Extract Company Name From Job Description \r\n            const companyName = await extractCompanyNameFromJobDescription( data.jobDescription)\r\n\r\n\r\n            const { candidateFirstname, roleName, experienceLevel, jobDescription }  = data \r\n\r\n\r\n            let interviewData: IinterviewData = { candidateFirstname, roleName, experienceLevel, jobDescription, companyName, candidateResume: userResume }\r\n            /** Initialize Interview Session  */\r\n\r\n            // Set New Interview Session For Candidate \r\n            const interviewSessionData: IinterviewSessionData =\r\n             {\r\n                interviewComplete: false,  \r\n                interviewTranscript: `Interviewer: Welcome to the Interview ${ candidateFirstname }`, // Initialize First Message In Interview Transcript \r\n                interviewData \r\n             }\r\n\r\n            // Save Session To Memory \r\n            setCache(socket.id, interviewSessionData )\r\n\r\n            // Send Welcome Message To Client \r\n            var serverResponse = { msg: `Welcome to the interview ${ candidateFirstname }`, metaData:{ interviewComplete: false, audioUrl:'audioUrl' }}\r\n            socket.emit('INTERVIEWER_RESPONSE', serverResponse ) \r\n\r\n\r\n\r\n            socket.on('message',async (message)=>{\r\n\r\n                // Get Candidates Interview Session From Memory \r\n                var interviewSessionData = await RedisClient.get(socket.id) \r\n\r\n                // Ensure Interview Session Exists \r\n                if( !interviewSessionData )\r\n                {\r\n                    socket.emit('SERVER_ERROR','COULD_NOT_FIND_INTERVIEW_DATA_IN_MEMORY') \r\n                    return \r\n                }\r\n\r\n                // Parse Interview Session Data To Json \r\n                var parsedInterviewSessionData: IinterviewSessionData = JSON.parse( interviewSessionData ) \r\n                \r\n                // Append Prefix \"Candidate\" to Candidates  Response  \r\n                var candidateMessage = '\\nCandidate: ' + message\r\n\r\n                // Append variable \"candidateMessage\"  to Interview Transcript \r\n                parsedInterviewSessionData['interviewTranscript'] = parsedInterviewSessionData['interviewTranscript'] + candidateMessage\r\n\r\n                // Pass Interview Transcript to Interviewer and Check If Interview Completed \r\n                const interviewCompleted = await Interviewer.checkInterviewCompleted( parsedInterviewSessionData['interviewTranscript'])\r\n\r\n                // Check Interview Completed Status \r\n                if( interviewCompleted )\r\n                {\r\n                    const interviewerResponse = { msg:'Interview Ended', metaData:{ interviewComplete: true, audioUrl:\"\"  }}\r\n                    // Create Results \r\n                    // Delete Interview Details From Memory \r\n                    socket.emit('INTERVIEW_COMPLETED', interviewerResponse)\r\n                }\r\n                else \r\n                {\r\n                    // Extract Current Interview Transcript And Interview Data \r\n                    const { interviewData, interviewTranscript } = parsedInterviewSessionData\r\n\r\n                    // Generate Interviewer Response Based on Interview Transcript \r\n                    var generatedInterviewerResponse = await Interviewer.generateInterviewerNextResponse(interviewData, interviewTranscript )\r\n\r\n                    // Save Interviewer Response to Candidate Session Data \r\n                    parsedInterviewSessionData['interviewTranscript'] = parsedInterviewSessionData['interviewTranscript'] + '\\n' + generatedInterviewerResponse \r\n\r\n                    // Update Candidate Session Data in Memory \r\n                    setCache( socket.id, parsedInterviewSessionData ) \r\n\r\n                    const interviewerResponse = { msg: generatedInterviewerResponse, metaData:{ interviewComplete: false, audioUrl: 'audioUrl'}}\r\n                    socket.emit('INTERVIEWER_RESPONSE', interviewerResponse )\r\n                }\r\n            })\r\n\r\n\r\n            socket.on('disconnect',()=>{\r\n                logger.info(\"Client disconnected from socket server\") \r\n                // Save User Interview Details to DB \r\n            })\r\n\r\n        })\r\n\r\n\r\n\r\n        logger.info('SOCKET.io Server Initialized') \r\n\r\n    }\r\n    catch(e: any)\r\n    {\r\n        logger.error(e,\"Could Not Initialize Web Socket Server\") \r\n    }\r\n\r\n}"],"names":[],"mappings":"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","debug_id":"ddc68693-7c85-5293-9e32-548148a681de"}