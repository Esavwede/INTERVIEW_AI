{"version":3,"file":"AI_Interviewer.js","sources":["apps/AI_Interviewer/AI_Interviewer.ts"],"sourceRoot":"/","sourcesContent":["\r\n\r\n\r\nimport { initiliazeGeminiAI } from \"./functions/geminiInitializer\";\r\nimport { IinterviewData } from \"./interfaces/interviewData\";\r\n\r\n\r\n//*** Prompts  */\r\nimport { INTERVIEW_COMPLETE_CHECKER } from \"./prompts/AI_Interviewer_Prompts\";\r\nimport { generatePromptForInterviewerResponse } from \"./functions/generatePromptForInterviewerResponse\";\r\n\r\n\r\nexport class AI_Interviewer \r\n{\r\n    public gemini \r\n\r\n    constructor()\r\n    {\r\n        this.gemini = initiliazeGeminiAI() \r\n    }\r\n\r\n\r\n    /** Running Prompts  */\r\n\r\n\r\n        // Runs a prompt with the gemini AI model and returns a string \r\n        async runPromptWithGemini( prompt: string )\r\n        {\r\n            const model = this.gemini.getGenerativeModel({ model: \"gemini-1.5-flash\"});\r\n            const result = await model.generateContent([prompt]);\r\n            const textResult: string =  result.response.text()\r\n            return textResult\r\n        }\r\n\r\n\r\n    /***  Interview Messages  */\r\n\r\n        // Adds A message From the Interviewer or Candidate To the Interview Transcript\r\n        appendMessageToInterviewTranscript( interviewTranscript: string, message: string)\r\n        {\r\n            return interviewTranscript + '\\n' + message\r\n        }\r\n\r\n\r\n    /*** Candidate  */\r\n\r\n        // Response \r\n        prependStringToCandidateResponse( stringToPrepend: string, candidateResponse: string )\r\n        {\r\n            return stringToPrepend + ' ' + candidateResponse \r\n        }\r\n\r\n\r\n    /*** Interviewer Responses  */\r\n\r\n        // Generate Interviewer Response \r\n        async generateInterviewerNextResponse( interviewData: IinterviewData, interviewTranscript: string)\r\n        {\r\n            const interviewerResponsePrompt = generatePromptForInterviewerResponse( interviewData, interviewTranscript )  \r\n            const nextResponse = await this.runPromptWithGemini( interviewerResponsePrompt )   \r\n            return nextResponse \r\n        }\r\n\r\n\r\n    /** Interview LifeCycle  */             \r\n\r\n        // Utilizes AI to Check If An Interview Has Been Completed \r\n        async checkInterviewCompleted( interviewTranscript: string ): Promise<boolean> \r\n        {\r\n        try \r\n        {\r\n                // Interview Checker Role Prompt to Interview Transcript \r\n                var prompt = INTERVIEW_COMPLETE_CHECKER + '\\n' + interviewTranscript\r\n\r\n                // Check Completed \r\n                var interviewCompleted: string = await this.runPromptWithGemini(prompt)  /** INFO: returns a string: \"true\" or \"false\" */\r\n\r\n                // Result \r\n                var finalResult: any = undefined \r\n\r\n                interviewCompleted = interviewCompleted.trim() \r\n\r\n                if( interviewCompleted === 'true' ){ finalResult = true }\r\n                if( interviewCompleted === 'false' ){ finalResult = false }\r\n\r\n                return finalResult\r\n        }\r\n        catch(e: any)\r\n        {\r\n                console.log(`INTERVIEWER_ERROR: COULD NOT CHECK INTERVIEW COMPLETE  ${ e } `)\r\n                process.exit(1) \r\n        }\r\n        }\r\n\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,qEAAmE;AAKnE,6EAA8E;AAC9E,2GAAwG;AAGxG,MAAa,cAAc;IAIvB;QAEI,IAAI,CAAC,MAAM,GAAG,IAAA,sCAAkB,GAAE,CAAA;IACtC,CAAC;IAOS,mBAAmB,CAAE,MAAc;;YAErC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,kBAAkB,EAAC,CAAC,CAAC;YAC3E,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACrD,MAAM,UAAU,GAAY,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;YAClD,OAAO,UAAU,CAAA;QACrB,CAAC;KAAA;IAMD,kCAAkC,CAAE,mBAA2B,EAAE,OAAe;QAE5E,OAAO,mBAAmB,GAAG,IAAI,GAAG,OAAO,CAAA;IAC/C,CAAC;IAMD,gCAAgC,CAAE,eAAuB,EAAE,iBAAyB;QAEhF,OAAO,eAAe,GAAG,GAAG,GAAG,iBAAiB,CAAA;IACpD,CAAC;IAMK,+BAA+B,CAAE,aAA6B,EAAE,mBAA2B;;YAE7F,MAAM,yBAAyB,GAAG,IAAA,2EAAoC,EAAE,aAAa,EAAE,mBAAmB,CAAE,CAAA;YAC5G,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAE,yBAAyB,CAAE,CAAA;YAChF,OAAO,YAAY,CAAA;QACvB,CAAC;KAAA;IAMK,uBAAuB,CAAE,mBAA2B;;YAE1D,IACA,CAAC;gBAEO,IAAI,MAAM,GAAG,mDAA0B,GAAG,IAAI,GAAG,mBAAmB,CAAA;gBAGpE,IAAI,kBAAkB,GAAW,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;gBAGvE,IAAI,WAAW,GAAQ,SAAS,CAAA;gBAEhC,kBAAkB,GAAG,kBAAkB,CAAC,IAAI,EAAE,CAAA;gBAE9C,IAAI,kBAAkB,KAAK,MAAM,EAAE,CAAC;oBAAC,WAAW,GAAG,IAAI,CAAA;gBAAC,CAAC;gBACzD,IAAI,kBAAkB,KAAK,OAAO,EAAE,CAAC;oBAAC,WAAW,GAAG,KAAK,CAAA;gBAAC,CAAC;gBAE3D,OAAO,WAAW,CAAA;YAC1B,CAAC;YACD,OAAM,CAAM,EACZ,CAAC;gBACO,OAAO,CAAC,GAAG,CAAC,0DAA2D,CAAE,GAAG,CAAC,CAAA;gBAC7E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACvB,CAAC;QACD,CAAC;KAAA;CAER;AAlFD,wCAkFC","debug_id":"51fdd5a5-e1cf-5fce-8817-9532fe7a8765"}